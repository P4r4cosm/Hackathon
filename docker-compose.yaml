name: Hackathon
services:
  postgres:
    image: postgres:16
    container_name: postgres_hackathon
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  authservice:
    build:
      context: . 
      dockerfile: AuthService/Dockerfile 
    env_file:
      - .env 
    container_name: AuthService
    ports:
      - "8012:80"   # Хост 8012 -> Контейнер 80 (HTTP)
      - "8011:443"  # Хост 8011 -> Контейнер 443 (HTTPS)
    environment:
      - ASPNETCORE_ENVIRONMENT=Development 
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - ROLES=${ROLES}
      - JwtSettings__SecretKey=${JwtSettings__SecretKey}
      - JwtSettings__Issuer=${JwtSettings__Issuer}
      - JwtSettings__Audience=${JwtSettings__Audience}
      - JwtSettings__DurationInHours=${JwtSettings__DurationInHours}
      - JwtSettings__AccessTokenDurationInMinutes=${JwtSettings__AccessTokenDurationInMinutes}
      - JwtSettings__RefreshTokenDurationInDays=${JwtSettings__RefreshTokenDurationInDays}
      - AUTHENTICATION__GOOGLE__CLIENTID=${AUTHENTICATION__GOOGLE__CLIENTID}
      - AUTHENTICATION__GOOGLE__CLIENTSECRET=${AUTHENTICATION__GOOGLE__CLIENTSECRET}
      # Настройки для HTTPS
      - ASPNETCORE_URLS=http://+:80;https://+:443
      - KESTREL_CERTIFICATE_PASSWORD=${KESTREL_CERT_PASSWORD}
      # CORS настройки
      - AllowedOrigins__0=http://localhost:3010
      - AllowedOrigins__1=http://localhost:3000
      - AllowedOrigins__2=http://localhost:8000
      - AllowedOrigins__3=http://localhost:8001
      - AllowedOrigins__4=http://authservicefrontend
      - AllowedOrigins__5=http://frontend
      - AllowedOrigins__6=http://gateway
    volumes:
      - ./cert.pfx:/app/cert.pfx
    depends_on:
      - postgres
  gateway:
    build:
      context: . 
      dockerfile: HackathonGateway/HackathonGateway/Dockerfile 
    env_file:
      - .env
    container_name: Gateway
    ports:
      - "8000:80"   # Хост 8080 -> Контейнер 80 (HTTP)
      - "8001:443"  # Хост 8443 -> Контейнер 443 (HTTPS)
    environment:
      - ASPNETCORE_ENVIRONMENT=Development 
      - JwtSettings__SecretKey=${JwtSettings__SecretKey}
      - JwtSettings__Issuer=${JwtSettings__Issuer}
      - JwtSettings__Audience=${JwtSettings__Audience}
      - JwtSettings__DurationInHours=${JwtSettings__DurationInHours}
      # Настройки для HTTPS
      - ASPNETCORE_URLS=http://+:80;https://+:443
      - KESTREL_CERTIFICATE_PASSWORD=${KESTREL_CERT_PASSWORD}
      # CORS настройки
      - AllowedOrigins__0=http://localhost:3010
      - AllowedOrigins__1=http://localhost:3000
      - AllowedOrigins__2=http://authservicefrontend
      - AllowedOrigins__3=http://frontend
    volumes:
      - ./cert.pfx:/app/cert.pfx
    depends_on:
      - authservice
  soundservice:
    build:
      context: .
      dockerfile: SoundService/SoundService/Dockerfile
    env_file:
      - .env
    container_name: SoundService
    ports: 
      - "8020:80"
      #- "8021:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development 
      # Настройки для HTTPS
      - ASPNETCORE_URLS=http://+:80; #https://+:443
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - ROLES=${ROLES}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - ELASTIC_URI=${ELASTIC_URI}


       # --- ПЕРЕМЕННЫЕ ДЛЯ RABBITMQ ---
      - RABBITMQ_HOSTNAME=rabbitmq # Имя сервиса RabbitMQ
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USERNAME=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASS}

      - RABBITMQ_DEMUCS_QUEUE_NAME=${RABBITMQ_DEMUCS_QUEUE_NAME}
      - RABBITMQ_DEMUCS_TASKS_ROUTING_KEY=${RABBITMQ_DEMUCS_TASKS_ROUTING_KEY}
      - RABBITMQ_AUDIO_PROCESSING_EXCHANGE=${RABBITMQ_AUDIO_PROCESSING_EXCHANGE}
      - RABBITMQ_RESULTS_EXCHANGE_NAME=${RABBITMQ_RESULTS_EXCHANGE_NAME}
      - RABBITMQ_TASK_RESULTS_QUEUE_NAME=${RABBITMQ_TASK_RESULTS_QUEUE_NAME}
      - RABBITMQ_TASK_RESULTS_ROUTING_KEY=$"{RABBITMQ_TASK_RESULTS_ROUTING_KEY}"

    depends_on:
      - postgres
      - rabbitmq 
      - minio    
      - elasticsearch
  frontend:
    build:
      context: . # Контекст сборки - корень проекта
      dockerfile: FrontendService/Dockerfile
    container_name: Frontend
    ports:
      - "3000:80"   # Хост 3000 -> Контейнер 80 (HTTP)
    depends_on:
      - gateway
      - postgres
      - elasticsearch
      - minio

  authservicefrontend:
    build:
      context: . # Контекст сборки - корень проекта
      dockerfile: AuthServiceFrontend/Dockerfile
    container_name: AuthServiceFrontend
    restart: always
    ports:
      - "3010:80"   # Хост 3010 -> Контейнер 80 (HTTP)
    environment:
      - ASPNETCORE_URLS=http://+:80;https://+:443 # Kestrel будет слушать оба порта
      - KESTREL_CERTIFICATE_PASSWORD=${KESTREL_CERT_PASSWORD}
    depends_on:
      - authservice
      - gateway
  elasticsearch:
    image: elasticsearch:8.17.3
    container_name: elastic
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - xpack.security.enrollment.enabled=false
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g #ограничение по ОЗУ в 1гб
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data   # Именованный том для данных
      - es_logs:/usr/share/elasticsearch/logs   # Именованный том для логов
    healthcheck: # Важно для depends_on
      test: ["CMD-SHELL", "curl -s -f http://elasticsearch:9200"]
      interval: 10s
      timeout: 10s
      retries: 10


  elasticsearch-setup:
    image: alpine/curl # Легковесный образ с curl
    container_name: elasticsearch_setup
    depends_on:
      - elasticsearch
    volumes:
      - ./setup-elasticsearch.sh:/setup-elasticsearch.sh # Монтируем наш скрипт
      - ./audio_records_mapping.json:/usr/share/elasticsearch/config/audio_records_mapping.json # Монтируем файл маппинга
      # Если используете шаблон, также смонтируйте его:
      # - ./audio_records_template.json:/usr/share/elasticsearch/config/audio_records_template.json
    command: ["sh", "/setup-elasticsearch.sh"] # Команда для запуска скрипта
    restart: on-failure # Можно перезапускать, если скрипт упадет, но обычно он должен выполниться один раз

  kibana:
    image: kibana:8.17.3
    container_name: kibana_hackaton
    restart: unless-stopped
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - node.name=kibana
      - cluster=es-docker-cluster
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  
    
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address :9001

  mc-init:
    image: minio/mc
    container_name: mc-init
    depends_on:
      - minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
    volumes:
      - ./music_test/:/init-audio
      - ./init-mc.sh:/usr/local/bin/init-mc.sh 
    entrypoint: ["/usr/local/bin/init-mc.sh"]  

  demucs_service: # Этот сервис теперь в основном для сборки образа
    build:
      context: ./demucs
      dockerfile: Dockerfile
    image: local/demucs_app 
    container_name: demucs_build_helper # Имя контейнера не так важно, т.к. он не будет постоянно работать
    volumes:
      - demucs_models_cache:/data/models


  demucs_worker: # Новый Python воркер
    build:
      context: ./DemucsWorker # Предполагается, что Dockerfile и скрипт в этой папке
      dockerfile: Dockerfile 
    container_name: demucs_worker_1
    restart: unless-stopped
    env_file:
      - .env # Все переменные для RabbitMQ, MinIO и Demucs должны быть здесь
    environment:
      - LOG_LEVEL=INFO # Уровень логирования для воркера
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_CONSUME_QUEUE_NAME=${RABBITMQ_DEMUCS_QUEUE_NAME}
      - RABBITMQ_CONSUME_EXCHANGE_NAME=${RABBITMQ_AUDIO_PROCESSING_EXCHANGE}
      - RABBITMQ_CONSUME_ROUTING_KEY=${RABBITMQ_DEMUCS_TASKS_ROUTING_KEY}
      - RABBITMQ_PUBLISH_EXCHANGE_NAME=${RABBITMQ_RESULTS_EXCHANGE_NAME}
      - RABBITMQ_PUBLISH_ROUTING_KEY=${RABBITMQ_TASK_RESULTS_ROUTING_KEY}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=C5RDgrAREfHtx8lgpayc
      - MINIO_SECRET_KEY=UYKwpYFjj9ahfea4vCa0ROGhfLiCSsII8LjXwYJc
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - DEMUCS_MODEL=htdemucs_ft # или любая другая модель, но htdemucs_ft лучшая 
    volumes:
      - demucs_models_cache:/root/.cache/torch 
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_started # Или service_completed_successfully для mc-init
    # --- Для использования GPU (если Dockerfile собран с поддержкой CUDA) ---
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1 # или 'all'
    #           capabilities: [gpu]

  # Сервис для сборки базового образа historical-denoiser
  historical_denoise_base:
    build:
      context: ./historical-denoise 
      dockerfile: Dockerfile       
    image: historical-denoiser:latest 
    container_name: historical_denoise_base_builder 
    # Этот сервис нужен только для сборки образа, его не нужно запускать постоянно

  historical_denoise_worker:
    build:
      context: ./HistoricalDenoiseWorker
      dockerfile: Dockerfile
    container_name: historical_denoise_worker_1
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - LOG_LEVEL=INFO
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT} 
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST:-/}
      - RABBITMQ_CONSUME_QUEUE_NAME=${RABBITMQ_HISTORICAL_DENOISE_QUEUE_NAME:-historical_denoise_tasks_queue} 
      - RABBITMQ_CONSUME_EXCHANGE_NAME=${RABBITMQ_AUDIO_PROCESSING_EXCHANGE:-audio_processing_exchange}
      - RABBITMQ_CONSUME_ROUTING_KEY=${RABBITMQ_HISTORICAL_DENOISE_ROUTING_KEY:-historical_denoise.task}
      - RABBITMQ_PUBLISH_EXCHANGE_NAME=${RABBITMQ_RESULTS_EXCHANGE_NAME:-results_exchange}
      - RABBITMQ_PUBLISH_ROUTING_KEY=${RABBITMQ_TASK_RESULTS_ROUTING_KEY:-task.result}

      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} 
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY} 
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - MINIO_USE_SSL=False

      # Переменные для повторных попыток подключения к RabbitMQ 
      - MAX_RETRIES_RABBITMQ=${MAX_RETRIES_RABBITMQ:-5}
      - RECONNECT_DELAY_SECONDS=${RECONNECT_DELAY_SECONDS:-5}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Для Docker-out-of-Docker
      - historical_denoise_models_cache:/app/experiments/trained_model # Пример, если нужно
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_started
      historical_denoise_base: 
        condition: service_completed_successfully 
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu] # Для работы с GPU -- раскоментировать

  rabbitmq: 
    image: rabbitmq:3-management-alpine 
    container_name: rabbitmq_broker
    ports:
      - "5672:5672"  # Порт для AMQP 
      - "15672:15672" # Порт для веб-интерфейса 
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/ # Для сохранения данных (очередей, сообщений)
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS} 
    restart: unless-stopped
    healthcheck: 
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  # shared_audio_data: {} # Временно не используется
  demucs_models_cache: {} # Том для кэширования моделей Demucs
  rabbitmq_data: {}
  whisper_models_cache: {} # Том для кэширования моделей Whisper
  historical_denoise_models_cache: {} # Том для кэширования Historical Denoise
  es_data:
  es_logs:
