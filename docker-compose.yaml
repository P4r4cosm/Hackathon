name: Hackathon
services:
  postgres:
    image: postgres:16
    container_name: postgres_hackathon
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  authservice:
    build:
      context: . # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±–æ—Ä–∫–∏ - –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
      dockerfile: AuthService/Dockerfile # –ü—É—Ç—å –∫ Dockerfile –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    env_file:
      - .env 
    ports:
      - "8012:80"   # –•–æ—Å—Ç 8012 -> –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 80 (HTTP)
      - "8011:443"  # –•–æ—Å—Ç 8011 -> –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 443 (HTTPS)
    container_name: AuthService
    environment:
      - ASPNETCORE_ENVIRONMENT=Development # –ò–ª–∏ Development, –∫–∞–∫ –≤–∞–º –Ω—É–∂–Ω–æ
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - ROLES=${ROLES}
      - JwtSettings__SecretKey=${JwtSettings__SecretKey}
      - JwtSettings__Issuer=${JwtSettings__Issuer}
      - JwtSettings__Audience=${JwtSettings__Audience}
      - JwtSettings__DurationInHours=${JwtSettings__DurationInHours}
      # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è HTTPS
      - ASPNETCORE_URLS=http://+:80;https://+:443
      - KESTREL_CERTIFICATE_PASSWORD=${KESTREL_CERT_PASSWORD}
      # CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      - AllowedOrigins__0=http://localhost:3010
      - AllowedOrigins__1=http://localhost:3000
      - AllowedOrigins__2=http://localhost:8000
      - AllowedOrigins__3=http://localhost:8001
      - AllowedOrigins__4=http://authservicefrontend
      - AllowedOrigins__5=http://frontend
      - AllowedOrigins__6=http://gateway
       # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è HTTPS
    volumes:
      - ./cert.pfx:/app/cert.pfx
    depends_on:
      - postgres
  gateway:
    build:
      context: . # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±–æ—Ä–∫–∏ - –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
      dockerfile: HackathonGateway/HackathonGateway/Dockerfile # –ü—É—Ç—å –∫ Dockerfile –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    env_file:
      - .env
    container_name: Gateway
    ports:
      - "8000:80"   # –•–æ—Å—Ç 8080 -> –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 80 (HTTP)
      - "8001:443"  # –•–æ—Å—Ç 8443 -> –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 443 (HTTPS)
    environment:
      - ASPNETCORE_ENVIRONMENT=Development 
      - JwtSettings__SecretKey=${JwtSettings__SecretKey}
      - JwtSettings__Issuer=${JwtSettings__Issuer}
      - JwtSettings__Audience=${JwtSettings__Audience}
      - JwtSettings__DurationInHours=${JwtSettings__DurationInHours}
      # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è HTTPS
      - ASPNETCORE_URLS=http://+:80;https://+:443
      - KESTREL_CERTIFICATE_PASSWORD=${KESTREL_CERT_PASSWORD}
      # CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      - AllowedOrigins__0=http://localhost:3010
      - AllowedOrigins__1=http://localhost:3000
      - AllowedOrigins__2=http://authservicefrontend
      - AllowedOrigins__3=http://frontend
    volumes:
      - ./cert.pfx:/app/cert.pfx
    depends_on:
      - authservice

  frontend:
    build:
      context: . # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±–æ—Ä–∫–∏ - –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
      dockerfile: FrontendService/Dockerfile
    container_name: Frontend
    ports:
      - "3000:80"   # –•–æ—Å—Ç 3000 -> –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 80 (HTTP)
    depends_on:
      - gateway

  authservicefrontend:
    build:
      context: . # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±–æ—Ä–∫–∏ - –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
      dockerfile: AuthServiceFrontend/Dockerfile
    container_name: AuthServiceFrontend
    restart: always
    ports:
      - "3010:80"   # –•–æ—Å—Ç 3010 -> –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 80 (HTTP)
    depends_on:
      - authservice
      - gateway

  elasticsearch:
    image: elasticsearch:8.17.3
    container_name: elastic
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - xpack.security.enrollment.enabled=false
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
      - ./logs/elasticsearch:/usr/share/elasticsearch/logs

  kibana:
    image: kibana:8.17.3
    container_name: kibana_hackaton
    restart: unless-stopped
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - node.name=kibana
      - cluster=es-docker-cluster
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address :9001

  mc-init:
    image: minio/mc
    container_name: mc-init
    depends_on:
      - minio
    volumes:
      # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–π –ø–∞–ø–∫–∏
      # ./music_test/original_tracks –Ω–∞ —Ö–æ—Å—Ç–µ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ
      # –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ mc-init –ø–æ –ø—É—Ç–∏ /init-audio
      - ./music_test/:/init-audio
    entrypoint: |
      /bin/sh -c "
        echo '–û–∂–∏–¥–∞–Ω–∏–µ MinIO...'
        sleep 8 # –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏—Ç—å sleep –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ MinIO —Å—Ç–∞—Ä—Ç—É–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ

        echo '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ mc –∫–ª–∏–µ–Ω—Ç–∞...'
        mkdir -p /root/.mc
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ accessKey –∏ secretKey –∑–¥–µ—Å—å —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å MINIO_ROOT_USER/PASSWORD
        # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è mc alias set, –∫–∞–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–æ—Å—å —Ä–∞–Ω–µ–µ
        echo '{\"version\": \"9\", \"hosts\": {\"local\": {
          \"url\": \"http://minio:9000\",
          \"accessKey\": \"minioadmin\",
          \"secretKey\": \"minioadmin\",
          \"api\": \"S3v4\"
        }}}' > /root/.mc/config.json

        echo '–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ local/audio-bucket (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)...'
        mc mb --ignore-existing local/audio-bucket

        echo 'üîÑ –ó–µ—Ä–∫–∞–ª–∏—Ä—É—é –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ /init-audio/ –≤ local/audio-bucket/ —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É...'
        # –ö–ª—é—á–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: mc mirror
        # --overwrite –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ –±–∞–∫–µ—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —É–¥–∞–ª—è–ª–∏—Å—å —Ñ–∞–π–ª—ã –≤ –±–∞–∫–µ—Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ, –¥–æ–±–∞–≤—å—Ç–µ --remove
        mc mirror --overwrite /init-audio/ local/audio-bucket/

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        echo '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∫–µ—Ç–∞ local/audio-bucket/ –ø–æ—Å–ª–µ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è:'
        mc ls --recursive local/audio-bucket/

        if [ $? -eq 0 ]; then
          echo '‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.'
        else
          echo '‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è mc mirror –∏–ª–∏ mc ls.'
        fi
      "

  demucs_service: # –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —Ç–µ–ø–µ—Ä—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–ª—è —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞
    build:
      context: ./demucs
      dockerfile: Dockerfile
    image: local/demucs_app # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–º—è —Å–æ–±–∏—Ä–∞–µ–º–æ–º—É –æ–±—Ä–∞–∑—É
    container_name: demucs_build_helper # –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–µ —Ç–∞–∫ –≤–∞–∂–Ω–æ, —Ç.–∫. –æ–Ω –Ω–µ –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
    volumes:
      # –≠—Ç–∏ —Ç–æ–º–∞ –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã docker-compose –∏—Ö "–∑–Ω–∞–ª",
      # –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏ docker run –∏–∑ FlaskServise.
      # –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º —Å–µ—Ä–≤–∏—Å–µ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.
      # –û–¥–Ω–∞–∫–æ, demucs_models_cache –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω, –µ—Å–ª–∏ demucs/Dockerfile
      # —Å–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –∏ –∫–ª–∞–¥–µ—Ç –∏—Ö –≤ /data/models.
      - demucs_models_cache:/data/models 

  flask_service:
    build:
      context: .
      dockerfile: FlaskServise/Dockerfile
    container_name: flask_service
    restart: unless-stopped
    ports:
      - "5001:5000" # –•–æ—Å—Ç:–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
    volumes:
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º bind mount –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
      - ./shared_docker_data:/shared_host_mount 
      - /var/run/docker.sock:/var/run/docker.sock # –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker-—Å–æ–∫–µ—Ç–∞
      # - shared_audio_data:/app/shared_audio_data # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–º
    depends_on:
      - demucs_service # FlaskServise –∑–∞–≤–∏—Å–∏—Ç –æ—Ç demucs_service
    environment:
      # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DEMUCS_CONTAINER_NAME –≤ app.py —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ demucs_service
      - DEMUCS_CONTAINER_NAME=demucs_service 
      # SHARED_DIR_FLASK –∏ SHARED_DIR_DEMUCS_CMD_ARG —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ app.py –∫–∞–∫ /shared_audio_data
      # –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–µ—Å—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ app.py

volumes:
  # shared_audio_data: {} # –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  demucs_models_cache: {} # –¢–æ–º –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π Demucs