// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SoundService.Data;

#nullable disable

namespace SoundService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("SoundService.Models.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SoundService.Models.AudioKeyword", b =>
                {
                    b.Property<Guid>("AudioRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KeywordId")
                        .HasColumnType("uuid");

                    b.HasKey("AudioRecordId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("AudioKeyword");
                });

            modelBuilder.Entity("SoundService.Models.AudioRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UploadUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("AudioRecords");
                });

            modelBuilder.Entity("SoundService.Models.AudioThematicTag", b =>
                {
                    b.Property<Guid>("AudioRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThematicTagId")
                        .HasColumnType("uuid");

                    b.HasKey("AudioRecordId", "ThematicTagId");

                    b.HasIndex("ThematicTagId");

                    b.ToTable("AudioThematicTag");
                });

            modelBuilder.Entity("SoundService.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("SoundService.Models.Keyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Keyword");
                });

            modelBuilder.Entity("SoundService.Models.ModerationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudioRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModeratorComment")
                        .HasColumnType("text");

                    b.Property<string>("ModeratorUserId")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AudioRecordId")
                        .IsUnique();

                    b.ToTable("ModerationStatuses");
                });

            modelBuilder.Entity("SoundService.Models.ThematicTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ThematicTag");
                });

            modelBuilder.Entity("SoundService.Models.Album", b =>
                {
                    b.HasOne("Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SoundService.Models.AudioKeyword", b =>
                {
                    b.HasOne("SoundService.Models.AudioRecord", "AudioRecord")
                        .WithMany("AudioKeywords")
                        .HasForeignKey("AudioRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoundService.Models.Keyword", "Keyword")
                        .WithMany("AudioKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioRecord");

                    b.Navigation("Keyword");
                });

            modelBuilder.Entity("SoundService.Models.AudioRecord", b =>
                {
                    b.HasOne("SoundService.Models.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Author", "Author")
                        .WithMany("Songs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoundService.Models.Genre", "Genre")
                        .WithMany("Songs")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("SoundService.Models.AudioThematicTag", b =>
                {
                    b.HasOne("SoundService.Models.AudioRecord", "AudioRecord")
                        .WithMany("AudioThematicTags")
                        .HasForeignKey("AudioRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoundService.Models.ThematicTag", "ThematicTag")
                        .WithMany("AudioThematicTags")
                        .HasForeignKey("ThematicTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioRecord");

                    b.Navigation("ThematicTag");
                });

            modelBuilder.Entity("SoundService.Models.ModerationStatus", b =>
                {
                    b.HasOne("SoundService.Models.AudioRecord", "AudioRecord")
                        .WithOne("ModerationStatus")
                        .HasForeignKey("SoundService.Models.ModerationStatus", "AudioRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioRecord");
                });

            modelBuilder.Entity("Author", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("SoundService.Models.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("SoundService.Models.AudioRecord", b =>
                {
                    b.Navigation("AudioKeywords");

                    b.Navigation("AudioThematicTags");

                    b.Navigation("ModerationStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("SoundService.Models.Genre", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("SoundService.Models.Keyword", b =>
                {
                    b.Navigation("AudioKeywords");
                });

            modelBuilder.Entity("SoundService.Models.ThematicTag", b =>
                {
                    b.Navigation("AudioThematicTags");
                });
#pragma warning restore 612, 618
        }
    }
}
